name: deploy@next

on:
  push:
    branches:
      - deployment-refactor

env:
  REGISTRY: ghcr.io
  API_IMAGE_NAME: saeon/catalogue_api
  PROXY_IMAGE_NAME: saeon/catalogue_proxy
  CLIENTS_IMAGE_NAME: saeon/catalogue_clients
  BRANCH_REF: deployment-refactor

jobs:
  build-api:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Check out source code (shared) 
        uses: SAEON/checkout@v2
        with:
          ref: ${{ env.BRANCH_REF }}

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}
          tags: |
            type=sha

      - name: Build and push API
        uses: docker/build-push-action@v2
        with:
          context: src/api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}



  build-proxy:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Check out source code (shared) 
        uses: SAEON/checkout@v2
        with:
          ref: ${{ env.BRANCH_REF }}

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.PROXY_IMAGE_NAME }}
          tags: |
            type=sha

      - name: Build and push API
        uses: docker/build-push-action@v2
        with:
          context: src/proxy
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}



  # build-clients:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     image: ${{ steps.meta.outputs.tags }}
  #   steps:
  #     - name: Check out source code (shared) 
  #       uses: SAEON/checkout@v2
  #       with:
  #         ref: ${{ env.BRANCH_REF }}

  #     - name: Log in to the Container registry
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@v1
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Extract metadata (tags, labels) for Docker
  #       id: meta
  #       uses: docker/metadata-action@v3
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.CLIENTS_IMAGE_NAME }}
  #         tags: |
  #           type=sha

  #     - name: Build and push clients
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: src/clients
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: [build-api, build-proxy]
    runs-on: github-runner.saeon.int
    steps:
      - name: Check out source code (shared) 
        uses: SAEON/checkout@v2
        with:
          ref: ${{ env.BRANCH_REF }}

      - name: TODO
        run: |
          echo wip








  # deploy:
  #   runs-on: catalogue.saeon.dvn
  #   steps:
  #     - uses: SAEON/checkout@v2
  #       with:
  #         ref: next

  #     - name: Configure services
  #       run: |
  #         cp deployment-configs/next/odp-filter.js src/api/odp-filter.js
  #         cp deployment-configs/next/client-filters.json src/clients/client-filters.json

  #     - name: Copy Docker Nginx configs
  #       run: |
  #         sudo /opt/cp-docker-nginx-configs.sh

  #     - name: Deploy services
  #       run: >-
  #         ENABLE_METADATA=true
  #         ALLOWED_ORIGINS="https://catalogue.saeon.dvn,http://curation.saeon.dvn"
  #         API_EXPORT_PORT_PUBLIC=5000
  #         API_PUBLIC_ADDRESS="https://api.catalogue.saeon.dvn"
  #         API_INTERNAL_ADDRESS="https://api.catalogue.saeon.dvn:5002"
  #         APP_KEY="${{ secrets.APP_KEY }}"
  #         CATALOGUE_NGINX_SERVER_NAME=catalogue.saeon.dvn
  #         CLIENTS_DEFAULT_NOTICES="Welcome to the SAEON Catalogue!,info"
  #         CLIENTS_EXPORT_PORT_INTERNAL=3002
  #         ODP_SSO_CLIENT_SCOPES="openid ODP.Metadata SAEON.DataPortal"
  #         ODP_AUTH_SCOPE="ODP.Catalogue ODP.Metadata"
  #         CLIENTS_PUBLIC_ADDRESS="https://catalogue.saeon.dvn"
  #         CLIENTS_EXPORT_PORT_PUBLIC=5001
  #         CLIENTS_SEARCH_FILTER_CONFIG_PATH="client-filters.json"
  #         DEPLOYMENT_ENV="development"
  #         ELASTICSEARCH_ADDRESS=http://next.elasticsearch.saeon.int
  #         HOSTNAME="https://catalogue.saeon.dvn"
  #         LATEST_COMMIT=$(git rev-parse HEAD)
  #         MONGO_DB=catalogue_dev
  #         MONGO_DB_ADDRESS=mongodb://mongo.saeon.int:27117
  #         MONGO_DB_PASSWORD="${{ secrets.MONGO_DB_DEV_PASSWORD }}"
  #         MONGO_DB_USERNAME="${{ secrets.MONGO_DB_DEV_USERNAME }}"
  #         NODE_ENV=production
  #         NODE_TLS_REJECT_UNAUTHORIZED=0
  #         ODP_ADDRESS="https://odp.saeon.dvn"
  #         ODP_CLIENT_SECRET="${{ secrets.ODP_CLIENT_SECRET_NEXT }}"
  #         ODP_FILTER_PATH="odp-filter.js"
  #         ODP_SSO_CLIENT_SECRET="${{ secrets.ODP_SSO_CLIENT_SECRET_NEXT}}"
  #         POSTGIS_PASSWORD="${{ secrets.POSTGIS_PASSWORD }}"
  #         POSTGIS_USERNAME="${{ secrets.POSTGIS_USERNAME }}"
  #         POSTGIS_USERNAME_PUBLIC="${{ secrets.POSTGIS_USERNAME_PUBLIC }}"
  #         POSTGIS_PASSWORD_PUBLIC="${{ secrets.POSTGIS_PASSWORD_PUBLIC }}"
  #         PROXY_ADDRESS="https://proxy.saeon.dvn"
  #         SUBDOMAIN_APP_ENTRIES="curation-tools"
  #         /usr/local/bin/docker-compose --env-file docker-compose.env up -d --force-recreate --build