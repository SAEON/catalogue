scalar DateTime
scalar JSON
scalar Void
scalar WKT_4326
scalar FunctionString

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: JSON
  endCursor: JSON
}

# Interfaces

interface Node {
  id: ID!
}

interface Connection {
  """
  A list of edges
  """
  edges: [Edge!]!
  """
  A list of nodes
  """
  nodes: [Node!]
  """
  Information to aid in pagination
  """
  pageInfo: PageInfo!
  """
  Count of total results
  """
  totalCount: Int!
}

interface Edge {
  cursor: String!
  node: Node!
}

#  Types

type StatusHash {
  id: ID!
}

enum DateBucket {
  minute
  hour
  day
  month
  year
}

type DownloadSummary {
  """
  DOI of metadata record (or SAEON id if no DOI)
  """
  doi: ID!
  clientSession: String
  clientIpAddress: String
  """
  Resolve an IP Address to location using https://ip-api.com/
  """
  clientIpLocation: String
  clientUserAgent: String
  clientPathname: String
  referrer: String
  """
  Download date, rounded down to the hour
  """
  date(bucket: DateBucket): DateTime!
  count: Int!
}

enum ListType {
  curated
  public
}

type List {
  id: ID!
  search: JSON!
  title: String
  description: String
  referrer: String
  url: String
  createdBy: String
  disableSidebar: Boolean
  showSearchBar: Boolean
  type: ListType
}

type Query {
  """
  Return the Catalogue entity with optional input for indicating source where the catalogue software was linked from
  """
  catalogue(referrer: String): Catalogue!
  """
  Return a Dashboard entity
  """
  dashboard(id: ID!): Dashboard
  """
  Find a chart
  """
  charts(ids: [ID!]!): [Chart!]
  """
  Find a filter
  """
  filters(ids: [ID!]!): [Filter!]
  """
  Retrieve a web-browser's previously saved databook
  """
  databook(id: ID!): Databook
  """
  Retrieve search context (i.e. a dynamic list)
  """
  list(id: ID!): List
  """
  Retrieve many search contexts (i.e. many dynamic lists)
  """
  lists: [List!]!
  """
  Retrieve a web-browser's previously saved atlas TODO - should be on query
  """
  atlas(id: ID!): JSON
  """
  Retrieve dashboards by id
  """
  dashboards(ids: [ID!]!): [Dashboard!]
  downloadsReport: [DownloadSummary]!
  roles: [Role]!
  permissions: [Permission]!
  users: [User]!
  user(id: ID!): User
}

type Mutation {
  updateRecordDataFormat(id: ID!, immutableResource: JSON!): Void
  logBrowserEvents(input: [BrowserEventInput]!): Void
  """
  Save a web-browser's search context for retrieving as a databook
  """
  createDatabook(search: JSON!, createdBy: String!): ID!
  """
  Save a web-browser's search context for retrieving as an atlas
  """
  createAtlas(search: JSON!, createdBy: String!): ID!
  """
  Delete a saved list (only curated lists can be deleted)
  """
  deleteList(id: ID!): Boolean!
  """
  Save a search context (i.e. a dynamic list)
  """
  saveList(
    id: ID
    search: JSON!
    createdBy: String!
    type: ListType
    title: String
    description: String
  ): List!
  createDashboard(title: String, subtitle: String, description: String, databookId: ID!): Dashboard!
  updateDashboard(
    id: ID!
    layout: JSON
    title: String
    subtitle: String
    description: String
    filters: [ID!]
  ): Dashboard!
  updateDatabook(id: ID!, editors: JSON): Databook!
  """
  Return a Dashboard entity
  """
  dashboard(id: ID!): Dashboard
  deleteDashboard(id: ID!): Boolean!
  createChart(
    title: String
    description: String
    databookId: ID!
    data: JSON!
    type: ChartType!
    config: JSON!
    sql: String!
  ): Chart!
  editChart(id: ID!, title: String, description: String, setOption: FunctionString): Chart!
  deleteChart(id: ID!): Boolean!
  createFilter(
    name: String
    databookId: ID!
    columnFiltered: String
    values: [String]
    sql: String
  ): Filter!
  deleteFilter(id: ID!): Boolean!
  assignRolesToUser(userId: ID!, roleIds: [ID!]!): User!
}

input BrowserEventInput {
  type: String!
  createdAt: DateTime!
  info: JSON!
  clientVersion: String!
  commitHash: String!
  referrer: String
}
