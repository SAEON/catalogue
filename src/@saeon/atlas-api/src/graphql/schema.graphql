scalar DateTime
scalar JSON
scalar Void

enum Entity {
  Map
  BrowserEvent
}

interface Node {
  id: ID!
  type: Entity!
}

type Map implements Node {
  id: ID!
  name: String
  type: Entity!
}

type Query {
  node(id: ID!): Node
  search(dsl: JSON!): JSON
  nodes: [Node]!
}

type Subscription {
  onFilterChange: JSON
}

input MapInput {
  name: String
  type: Entity!
}

input BrowserEventInput {
  name: String!
  createdAt: DateTime!
  info: JSON!
}

type Mutation {
  upsertMap(input: MapInput!, id: ID): Node!
  logBrowserEvents(input: [BrowserEventInput]!): [Boolean]!
}
