# https://itnext.io/improve-your-graphql-schema-with-the-relay-specification-8952d06998eb

scalar DateTime
scalar JSON
scalar Void
scalar WKT_4326

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: JSON
  endCursor: JSON
}

# Interfaces

interface Node {
  id: ID!
}

interface Connection {
  # A list of edges
  edges: [Edge!]!
  # A list of nodes
  nodes: [Node!]
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Count of total results
  totalCount: Int!
}

interface Edge {
  cursor: String!
  node: Node!
}

type Query {
  # Return the Catalogue entity with optional input for indicating source where the catalogue software was linked from
  catalogue(referrer: String): Catalogue!
  # Return a Dashboard entity
  dashboard(id: ID!): Dashboard
  # Find a chart
  charts(id: ID): Chart
  # Retrieve a web-browser's previously saved databook
  databook(id: ID!): Databook
  # Retrieve a web-browser's previously saved search context
  searchState(id: ID!): JSON
  # Retrieve a web-browser's previously saved atlas TODO - should be on query
  atlas(id: ID!): JSON
  # Retrieve a Databook's dashboards
  dashboards(databookId: ID!): [Dashboard!]
}

# type Subscription {}

type Mutation {
  logBrowserEvents(input: [BrowserEventInput]!): Void
  submitFeedback(input: FeedbackInput!): Boolean!
  # Save a web-browser's search context for retrieving as a databook
  createDatabook(state: JSON!, createdBy: String!): ID!
  # Save a web-browser's search context for retrieving as an atlas
  createAtlas(state: JSON!, createdBy: String!): ID!
  # Save a web-browser's search context for retrieving
  persistSearchState(state: JSON!, createdBy: String!): ID!
  createDashboard(name: String, databookId: ID!): Dashboard!
  deleteDashboard(id: ID!): Boolean!
  # Add a chart to dashboard, and get the new count of a dashboard's charts
  addChartToDashboard(chartId: ID!, dashboardId: ID!): Chart!
  removeChartFromDashboard(chartId: ID!, dashboardId: ID!): Chart!
  createChart(
    name: String
    databookId: ID!
    data: JSON!
    xAxis: String!
    yAxis: String!
    sql: String!
  ): Chart!
  deleteChart(id: ID!): Boolean!
}

type BrowserEvent implements Node {
  id: ID!
  type: String!
  createdAt: DateTime
  info: JSON!
  clientVersion: String!
  commitHash: String!
}

input BrowserEventInput {
  type: String!
  createdAt: DateTime!
  info: JSON!
  clientVersion: String!
  commitHash: String!
}

input FeedbackInput {
  text: String!
  rating: Int!
  pathname: String!
  commitHash: String!
}
