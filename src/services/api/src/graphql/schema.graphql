# https://itnext.io/improve-your-graphql-schema-with-the-relay-specification-8952d06998eb

scalar DateTime
scalar JSON
scalar Void

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
}

# Interfaces

interface Node {
  id: ID!
}

interface Connection {
  # A list of edges
  edges: [Edge!]!
  # A list of nodes
  nodes: [Node!]
  # Information to aid in pagination
  pageInfo: PageInfo!
  # Count of total results
  totalCount: Int!
}

interface Edge {
  cursor: String!
  node: Node!
}

# Catalogue

type Catalogue {
  id: ID!

  # Fetch metadata records from SAEON's data catalogue
  records(
    # Fetch a single record by ID (other arguments are ignored)
    id: ID
    # Search for intersection of subject list
    subjects: [String!]
    # Page size (maximum allowed is 10 000 items per page)
    size: Int
    # Return elements in the list that come after the specified cursor
    after: ID
    # Return elements in the list that come before the specified cursor
    before: ID
  ): CatalogueRecordConnection!

  # Get count aggregation of records by fields, with optional filters
  summary(fields: [String!], filterBySubjects: [String!], limit: Int): JSON!
}

type CatalogueRecordConnection implements Connection {
  edges: [CatalogueRecordEdge!]!
  nodes: [CatalogueRecord!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type CatalogueRecordEdge implements Edge {
  cursor: String!
  node: CatalogueRecord!
}

type CatalogueRecord implements Node {
  id: ID!
  target: JSON!
  citation(style: CitationStyle, language: CitationLocale): String! # CitationStyle and CitationLocale are enums defined at runtime
}

# Browser events
type BrowserEvent implements Node {
  id: ID!
  type: String!
  createdAt: DateTime
  info: JSON!
  clientVersion: String!
  # Most recent source code commit of currently executing code
  commitHash: String!
}

input BrowserEventInput {
  type: String!
  createdAt: DateTime!
  info: JSON!
  clientVersion: String!
  # Most recent source code commit of currently executing code
  commitHash: String!
}

input FeedbackInput {
  text: String!
  rating: Int!
  pathname: String!
  # Most recent source code commit of currently executing code
  commitHash: String!
}

# GraphQL types

type Query {
  # Catalogue
  catalogue: Catalogue!
  # Client usage tracking
  browserEvents: [Node]!
}

type Subscription {
  onFilterChange: JSON
}

type Mutation {
  logBrowserEvents(input: [BrowserEventInput]!): [Boolean]!
  submitFeedback(input: FeedbackInput!): Boolean!
}
