---
- name: Configure @saeon/catalogue CentOS 7 server
  hosts: catalogue
  become: yes
  vars_prompt:
    - name: DEPLOYMENT_ENV
      prompt: Which deployment environment is this for? [next, stable]
      default: "next"
      private: no

    - name: CATALOGUE_NGINX_SERVER_NAME
      prompt: What hostname or IP address will this deployment be on?
      private: no

    - name: CATALOGUE_PROXY_HOSTNAME
      prompt: What hostname or IP address will the proxy be available on?
      private: no      

    - name: MONGO_DB_USERNAME
      prompt: Provide a MongoDB username
      default: "admin"
      private: no

    - name: MONGO_DB_PASSWORD
      prompt: Provide a MongoDB password
      default: "password"
      private: yes    
      
    - name: POSTGIS_USERNAME
      prompt: Provide a PostGIS username
      default: "admin"
      private: no

    - name: POSTGIS_PASSWORD
      prompt: Provide a PostGIS password
      default: "password"
      private: yes    

    - name: DHPARAM_SIZE
      prompt: Specify the SSL dhparam size
      default: "256"
      private: no
      
  tasks:
    - name: Ensure /opt/
      file:
        path: /opt
        state: directory
        mode: '0755'     

    - name: Ensure /opt/dbak/
      file:
        path: /opt/dbak
        state: directory
        mode: '0755'

    - name: Ensure /var/lib/catalogue-api/
      file:
        path: /var/lib/catalogue-api
        state: directory
        mode: '0755'

    - name: Ensure /opt/ssl directory
      file:
        path: /opt/ssl
        state: directory
        mode: '0751'

    - name: Generate dhparams
      shell: |
        openssl dhparam -out /opt/ssl/dhparam.pem {{ DHPARAM_SIZE }}
      args:
        creates: /opt/ssl/dhparam.pem      

    - name: Install latest Git
      yum:
        name: https://packages.endpoint.com/rhel/7/os/x86_64/endpoint-repo-1.7-1.x86_64.rpm
        state: present     

    - name: Install Docker
      shell: |
        yum -y remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine
        yum -y remove docker-ce docker-ce-cli containerd.io
        yum -y install yum-utils
        yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
        yum -y install docker-ce docker-ce-cli containerd.io
        systemctl enable docker
        systemctl start docker

    - name: Clean up docker files regularly
      cron:
        name: Prune docker system
        minute: "0"
        hour: "0"
        day: "*"
        month: "*"
        weekday: "0"
        job: docker system prune -f > /opt/docker-system-clean.log 2>&1

    - name: Backup catalogue database (MongoDB)
      cron:
        name: Backup catalogue database (MongoDB)
        minute: "0"
        hour: "0"
        day: "*"
        month: "*"
        weekday: "*"
        job: docker run --net=catalogue_default -v /opt/dbak:/dbak --rm mongo:5.0.2 sh -c "mongodump --uri=mongodb://mongo:27017 -u={{ MONGO_DB_USERNAME }} -p={{ MONGO_DB_PASSWORD }} --authenticationDatabase=admin -d=catalogue --archive --gzip > /dbak/catalogue_bak_`date +\%Y-\%m-\%d_\%H-\%M-\%S.archive`" # The -c flag stands for 'chained', and allows for running chained commands (might not be required actually in this case) 
    
    - name: Prune MongoDB backups
      cron:
        name: Prune MongoDB backups
        minute: "0"
        hour: "0"
        day: "*"
        month: "*"
        weekday: "0"
        job: find /opt/dbak/ -mtime + 10 -type -f -delete

    - name: Install Docker Compose
      shell: |
        curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose

    - name: Install Nginx
      shell: |
        yum -y install epel-release
        yum -y install nginx
        systemctl enable nginx
        systemctl start nginx

    - name: Copy Nginx config
      template:
        src: templates/nginx/nginx.conf
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: '0644'
        force: yes

    - name: Copy Nginx config (API)
      template:
        src: templates/nginx/server-blocks/api.conf
        dest: /etc/nginx/conf.d/api.conf
        owner: root
        group: root
        mode: '0644'
        force: yes
        
    - name: Copy Nginx config (Clients)
      template:
        src: templates/nginx/server-blocks/clients.conf
        dest: /etc/nginx/conf.d/clients.conf
        owner: root
        group: root
        mode: '0644'
        force: yes
        
    - name: Copy Nginx config (Elasticsearch)
      template:
        src: templates/nginx/server-blocks/elasticsearch.conf
        dest: /etc/nginx/conf.d/elasticsearch.conf
        owner: root
        group: root
        mode: '0644'
        force: yes

    - name: Copy Nginx config (Kibana)
      template:
        src: templates/nginx/server-blocks/kibana.conf
        dest: /etc/nginx/conf.d/kibana.conf
        owner: root
        group: root
        mode: '0644'
        force: yes        

    - name: Copy Nginx config (Proxy)
      template:
        src: templates/nginx/server-blocks/proxy.conf
        dest: /etc/nginx/conf.d/proxy.conf
        owner: root
        group: root
        mode: '0644'
        force: yes    

    # TODO https://docs.ansible.com/ansible/2.7/modules/openssl_certificate_module.html
    # TODO https://www.digitalocean.com/community/tutorials/how-to-acquire-a-let-s-encrypt-certificate-using-ansible-on-ubuntu-18-04
  
    - name: Install and configure firewalld
      shell: |
        yum -y install firewalld
        systemctl unmask firewalld
        systemctl enable firewalld
        systemctl start firewalld    
        firewall-cmd --permanent --zone=public --add-service=http 
        firewall-cmd --permanent --zone=public --add-service=https
        firewall-cmd --permanent --add-port=27017/tcp # Mongo
        firewall-cmd --permanent --add-port=5432/tcp # Postgres
        firewall-cmd --permanent --add-port=3306/tcp # MySQL      
        firewall-cmd --reload

    - name: Setup Github Actions user
      user:
        name: runner
        group: docker
        comment: Limited-privilege User for running Github Actions

    - name: GitHub Actions-runner (sudo svc)
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%runner ALL=NOPASSWD: /home/runner/svc.sh'
        line: 'runner ALL=NOPASSWD: /home/runner/svc.sh'
        validate: /usr/sbin/visudo -cf %s

    - name: GitHub Actions-runner (sudo installdependencies.sh)
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%runner ALL=NOPASSWD: /home/runner/bin/installdependencies.sh'
        line: 'runner ALL=NOPASSWD: /home/runner/bin/installdependencies.sh'
        validate: /usr/sbin/visudo -cf %s        
    
    - name: Ensure SELinux is disabled
      lineinfile:
        path: /etc/selinux/config
        regexp: '^SELINUX='
        line: SELINUX=disabled
    
    - name: Finish setup by restarting the server
      reboot: