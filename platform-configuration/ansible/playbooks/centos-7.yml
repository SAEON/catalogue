---
- name: Configure @saeon/catalogue CentOS 7 server
  hosts: catalogue
  become: yes
  vars_prompt:
    - name: CATALOGUE_DEPLOYMENT_ENVironment
      prompt: Which deployment environment is this for? [next, stable]
      default: "next"
      private: no

    - name: MONGO_DB_USERNAMEname
      prompt: Provide a MongoDB username
      default: ""
      private: no

    - name: mongo_password
      prompt: Provide a MongoDB password
      default: ""
      private: yes      
      
  tasks:
    - name: Ensure /opt directory
      file:
        path: /opt
        state: directory
        mode: '0755'

    - name: Ensure /opt/dbak directory
      file:
        path: /opt/dbak
        state: directory
        mode: '0755'

    - name: Install latest Git
      yum:
        name: https://packages.endpoint.com/rhel/7/os/x86_64/endpoint-repo-1.7-1.x86_64.rpm
        state: present     

    - name: Install Docker
      shell: |
        yum -y remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine
        yum -y remove docker-ce docker-ce-cli containerd.io
        yum -y install yum-utils
        yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
        yum -y install docker-ce docker-ce-cli containerd.io
        systemctl enable docker
        systemctl start docker

    - name: Cleanup docker files regularly
      cron:
        name: Prune docker system
        minute: "0"
        hour: "0"
        day: "*"
        month: "*"
        weekday: "0"
        job: docker system prune -f > /opt/docker-system-clean.log 2>&1

    - name: Backup catalogue database (MongoDB)
      cron:
        name: Backup catalogue database (MongoDB)
        minute: "0"
        hour: "0"
        day: "*"
        month: "*"
        weekday: "*"
        job: docker exec mongo sh -c 'exec mongodump --username {{ MONGO_DB_USERNAMEname }} --password {{ mongo_password }} --authenticationDatabase admin -d catalogue --archive' > /opt/dbak/catalogue_`date +\%Y-\%m-\%d_\%H-\%M-\%S.archive` 2>&1
    
    - name: Prune MongoDB backups
      cron:
        name: Prune MongoDB backups
        minute: "0"
        hour: "0"
        day: "*"
        month: "*"
        weekday: "0"
        job: find /opt/dbak/ -mtime + 10 -type -f -delete

    - name: Install Docker Compose
      shell: |
        curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose

    - name: Install Nginx
      shell: |
        yum -y install epel-release
        yum -y install nginx
        systemctl enable nginx
        systemctl start nginx

    - name: Install and configure firewalld
      shell: |
        yum -y install firewalld
        systemctl unmask firewalld
        systemctl enable firewalld
        systemctl start firewalld    
        firewall-cmd --permanent --zone=public --add-service=http 
        firewall-cmd --permanent --zone=public --add-service=https
        firewall-cmd --permanent --add-port=27017/tcp # Mongo
        firewall-cmd --permanent --add-port=5432/tcp # Postgres
        firewall-cmd --permanent --add-port=3306/tcp # MySQL      
        firewall-cmd --reload
    
    - name: copy-nginx-config.sh
      copy:
        content: "cp ./platform-configuration/nginx/{{ CATALOGUE_DEPLOYMENT_ENVironment }}/nginx.conf /etc/nginx/"
        dest: /opt/copy-nginx-config.sh
        owner: root
        group: root
        mode: '0700'

    - name: copy-nginx-server-blocks.sh
      copy:
        content: "cp ./platform-configuration/nginx/{{ CATALOGUE_DEPLOYMENT_ENVironment }}/server-blocks/* /etc/nginx/conf.d/" 
        dest: /opt/copy-nginx-server-blocks.sh
        owner: root
        group: root
        mode: '0700'

    - name: reload-nginx.sh
      copy:
        content: "service nginx reload" 
        dest: /opt/reload-nginx.sh
        owner: root
        group: root
        mode: '0700'

    - name: Setup Github Actions user
      user:
        name: runner
        group: docker
        comment: Limited-privilege User for running Github Actions

    - name: GitHub Actions-runner 1/4 (sudo svc)
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%runner ALL=NOPASSWD: /home/runner/svc.sh'
        line: 'runner ALL=NOPASSWD: /home/runner/svc.sh'
        validate: /usr/sbin/visudo -cf %s

    - name: GitHub Actions-runner 2/4 (copy Nginx config)
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%runner ALL=NOPASSWD: /opt/copy-nginx-config.sh'
        line: 'runner ALL=NOPASSWD: /opt/copy-nginx-config.sh'
        validate: /usr/sbin/visudo -cf %s

    - name: GitHub Actions-runner 3/4 (copy Nginx blocks)
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%runner ALL=NOPASSWD: /opt/copy-nginx-server-blocks.sh'
        line: 'runner ALL=NOPASSWD: /opt/copy-nginx-server-blocks.sh'
        validate: /usr/sbin/visudo -cf %s

    - name: GitHub Actions-runner 4/4 (reload Nginx)
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%runner ALL=NOPASSWD: /opt/reload-nginx.sh'
        line: 'runner ALL=NOPASSWD: /opt/reload-nginx.sh'
        validate: /usr/sbin/visudo -cf %s
    
    - name: Ensure SELinux is disabled
      lineinfile:
        path: /etc/selinux/config
        regexp: '^SELINUX='
        line: SELINUX=disabled
    
    - name: Finish setup by restarting the server
      reboot: